import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

public class BankAcctApp {
    private static final List<Customer> customers = new ArrayList<>();
    private static final HashMap<String, List<Account>> customerAccounts = new HashMap<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to the Bank Account Application!");

        boolean exit = false;
        while (!exit) {
            System.out.println("\nMain Menu:");
            System.out.println("1. Add New Customer");
            System.out.println("2. Create New Account for a Customer");
            System.out.println("3. View Customer and Their Accounts");
            System.out.println("4. Deposit Money");
            System.out.println("5. Withdraw Money");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1 -> addNewCustomer();
                case 2 -> createAccountForCustomer(scanner);
                case 3 -> viewCustomerAndAccounts(scanner);
                case 4 -> depositMoney(scanner);
                case 5 -> withdrawMoney(scanner);
                case 6 -> exit = true;
                default -> System.out.println("Invalid choice. Please try again.");
            }
        }
        System.out.println("Thank you for using the Bank Account Application!");
    }

    private static void addNewCustomer() {
        System.out.println("\nAdd New Customer:");
        String customerId = DataEntry.enterStringWithLimit("Customer ID (max 5 chars): ", 5);
        String customerSSN = DataEntry.enterNumericString("Customer SSN (9 numeric chars): ", 9);
        String firstName = DataEntry.enterStringWithLimit("First Name (max 15 chars): ", 15);
        String lastName = DataEntry.enterStringWithLimit("Last Name (max 20 chars): ", 20);
        String street = DataEntry.enterStringWithLimit("Street (max 20 chars): ", 20);
        String city = DataEntry.enterStringWithLimit("City (max 20 chars): ", 20);
        String state = DataEntry.enterStringWithLimit("State (2 chars): ", 2);
        String zip = DataEntry.enterNumericString("Zip (5 numeric chars): ", 5);
        String phone = DataEntry.enterNumericString("Phone (10 numeric chars): ", 10);

        Customer customer = new Customer(customerId, customerSSN, firstName, lastName, street, city, state, zip, phone);
        customers.add(customer);
        customerAccounts.put(customerId, new ArrayList<>());
        System.out.println("Customer added successfully!");
    }

    private static void createAccountForCustomer(Scanner scanner) {
        System.out.println("\nCreate New Account for a Customer:");
        System.out.print("Enter Customer ID: ");
        String customerId = scanner.nextLine();
        Customer customer = findCustomerById(customerId);

        if (customer == null) {
            System.out.println("Customer not found. Please add the customer first.");
            return;
        }

        System.out.print("Enter account type (CHK/SAV): ");
        String accountType = scanner.nextLine().toUpperCase();
        System.out.print("Enter account number: ");
        String accountNumber = scanner.nextLine();
        System.out.print("Enter initial balance: ");
        double initialBalance = scanner.nextDouble();
        scanner.nextLine();

        Account account;
        if (accountType.equals("CHK")) {
            account = new CheckingAccount(accountNumber, initialBalance);
        } else if (accountType.equals("SAV")) {
            account = new SavingsAccount(accountNumber, initialBalance);
        } else {
            System.out.println("Invalid account type. Account creation failed.");
            return;
        }

        customerAccounts.get(customerId).add(account);
        System.out.println("Account created successfully for " + customer.getFirstName() + " " + customer.getLastName());
    }

    private static void viewCustomerAndAccounts(Scanner scanner) {
        System.out.println("\nView Customer and Their Accounts:");
        System.out.print("Enter Customer ID: ");
        String customerId = scanner.nextLine();
        Customer customer = findCustomerById(customerId);

        if (customer == null) {
            System.out.println("Customer not found.");
            return;
        }

        System.out.println("\nCustomer Information:");
        System.out.println(customer);

        System.out.println("\nAccounts:");
        List<Account> accounts = customerAccounts.get(customerId);
        if (accounts == null || accounts.isEmpty()) {
            System.out.println("No accounts found for this customer.");
        } else {
            for (Account account : accounts) {
                System.out.println(account);
            }
        }
    }

    private static void depositMoney(Scanner scanner) {
        System.out.println("\nDeposit Money:");
        System.out.print("Enter Customer ID: ");
        String customerId = scanner.nextLine();
        Customer customer = findCustomerById(customerId);

        if (customer == null) {
            System.out.println("Customer not found.");
            return;
        }

        System.out.print("Enter account number: ");
        String accountNumber = scanner.nextLine();
        Account account = findAccount(customerId, accountNumber);

        if (account == null) {
            System.out.println("Account not found.");
            return;
        }

        System.out.print("Enter amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine();
        System.out.print("Enter transaction date (YYYY-MM-DD): ");
        String date = scanner.nextLine();

        account.deposit(amount, date, "DEP");
    }

    private static void withdrawMoney(Scanner scanner) {
        System.out.println("\nWithdraw Money:");
        System.out.print("Enter Customer ID: ");
        String customerId = scanner.nextLine();
        Customer customer = findCustomerById(customerId);

        if (customer == null) {
            System.out.println("Customer not found.");
            return;
        }

        System.out.print("Enter account number: ");
        String accountNumber = scanner.nextLine();
        Account account = findAccount(customerId, accountNumber);

        if (account == null) {
            System.out.println("Account not found.");
            return;
        }

        System.out.print("Enter amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine();
        System.out.print("Enter transaction date (YYYY-MM-DD): ");
        String date = scanner.nextLine();

        account.withdrawal(amount, date, "WTH");
    }

    private static Customer findCustomerById(String customerId) {
        for (Customer customer : customers) {
            if (customer.getCustomerId().equals(customerId)) {
                return customer;
            }
        }
        return null;
    }

    private static Account findAccount(String customerId, String accountNumber) {
        List<Account> accounts = customerAccounts.get(customerId);
        if (accounts != null) {
            for (Account account : accounts) {
                if (account.getAccountNumber().equals(accountNumber)) {
                    return account;
                }
            }
        }
        return null;
    }
}
